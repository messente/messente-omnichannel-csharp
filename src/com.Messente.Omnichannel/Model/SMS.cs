/* 
 * Omnichannel API
 *
 * Messente's API which allows sending messages via various channels with fallback options.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = com.Messente.Omnichannel.Client.OpenAPIDateConverter;

namespace com.Messente.Omnichannel.Model
{
    /// <summary>
    /// SMS
    /// </summary>
    [DataContract]
    public partial class SMS : Message,  IEquatable<SMS>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SMS" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SMS() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SMS" /> class.
        /// </summary>
        /// <param name="text">Text content of the SMS (required).</param>
        /// <param name="autoconvert">Defines how non-GSM characters will be treated: - \&quot;on\&quot; Use replacement settings from the account&#39;s [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace)(default) - \&quot;full\&quot; All non GSM 03.38 characters will be replaced with suitable alternatives - \&quot;off\&quot; Message content is not modified in any way .</param>
        /// <param name="udh">hex-encoded string containing SMS UDH.</param>
        public SMS(string text = default(string), decimal? autoconvert = default(decimal?), string udh = default(string), string channel = default(string), string sender = default(string), int? validity = default(int?)) : base(channel, sender, validity)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for SMS and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            this.Autoconvert = autoconvert;
            this.Udh = udh;
        }
        
        /// <summary>
        /// Text content of the SMS
        /// </summary>
        /// <value>Text content of the SMS</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Defines how non-GSM characters will be treated: - \&quot;on\&quot; Use replacement settings from the account&#39;s [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace)(default) - \&quot;full\&quot; All non GSM 03.38 characters will be replaced with suitable alternatives - \&quot;off\&quot; Message content is not modified in any way 
        /// </summary>
        /// <value>Defines how non-GSM characters will be treated: - \&quot;on\&quot; Use replacement settings from the account&#39;s [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace)(default) - \&quot;full\&quot; All non GSM 03.38 characters will be replaced with suitable alternatives - \&quot;off\&quot; Message content is not modified in any way </value>
        [DataMember(Name="autoconvert", EmitDefaultValue=false)]
        public decimal? Autoconvert { get; set; }

        /// <summary>
        /// hex-encoded string containing SMS UDH
        /// </summary>
        /// <value>hex-encoded string containing SMS UDH</value>
        [DataMember(Name="udh", EmitDefaultValue=false)]
        public string Udh { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SMS {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Autoconvert: ").Append(Autoconvert).Append("\n");
            sb.Append("  Udh: ").Append(Udh).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SMS);
        }

        /// <summary>
        /// Returns true if SMS instances are equal
        /// </summary>
        /// <param name="input">Instance of SMS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SMS input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && base.Equals(input) && 
                (
                    this.Autoconvert == input.Autoconvert ||
                    (this.Autoconvert != null &&
                    this.Autoconvert.Equals(input.Autoconvert))
                ) && base.Equals(input) && 
                (
                    this.Udh == input.Udh ||
                    (this.Udh != null &&
                    this.Udh.Equals(input.Udh))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Autoconvert != null)
                    hashCode = hashCode * 59 + this.Autoconvert.GetHashCode();
                if (this.Udh != null)
                    hashCode = hashCode * 59 + this.Udh.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
