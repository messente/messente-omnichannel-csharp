/* 
 * Omnichannel API
 *
 * Messente's API which allows sending messages via various channels with fallback options.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: messente@messente.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = com.Messente.Omnichannel.Client.OpenAPIDateConverter;

namespace com.Messente.Omnichannel.Model
{
    /// <summary>
    /// DeliveryReportResponse
    /// </summary>
    [DataContract]
    public partial class DeliveryReportResponse :  IEquatable<DeliveryReportResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReportResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryReportResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReportResponse" /> class.
        /// </summary>
        /// <param name="statuses">Contains the delivery reports for each channnel, ordered by send order (required).</param>
        /// <param name="to">Recipient phone number in e.164 format (required).</param>
        /// <param name="omnimessageId">Unique identifier for the Omnimessage (required).</param>
        public DeliveryReportResponse(List<DeliveryResult> statuses = default(List<DeliveryResult>), string to = default(string), Guid? omnimessageId = default(Guid?))
        {
            // to ensure "statuses" is required (not null)
            if (statuses == null)
            {
                throw new InvalidDataException("statuses is a required property for DeliveryReportResponse and cannot be null");
            }
            else
            {
                this.Statuses = statuses;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for DeliveryReportResponse and cannot be null");
            }
            else
            {
                this.To = to;
            }
            // to ensure "omnimessageId" is required (not null)
            if (omnimessageId == null)
            {
                throw new InvalidDataException("omnimessageId is a required property for DeliveryReportResponse and cannot be null");
            }
            else
            {
                this.OmnimessageId = omnimessageId;
            }
        }
        
        /// <summary>
        /// Contains the delivery reports for each channnel, ordered by send order
        /// </summary>
        /// <value>Contains the delivery reports for each channnel, ordered by send order</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<DeliveryResult> Statuses { get; set; }

        /// <summary>
        /// Recipient phone number in e.164 format
        /// </summary>
        /// <value>Recipient phone number in e.164 format</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// Unique identifier for the Omnimessage
        /// </summary>
        /// <value>Unique identifier for the Omnimessage</value>
        [DataMember(Name="omnimessage_id", EmitDefaultValue=false)]
        public Guid? OmnimessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryReportResponse {\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  OmnimessageId: ").Append(OmnimessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryReportResponse);
        }

        /// <summary>
        /// Returns true if DeliveryReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.OmnimessageId == input.OmnimessageId ||
                    (this.OmnimessageId != null &&
                    this.OmnimessageId.Equals(input.OmnimessageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Statuses != null)
                    hashCode = hashCode * 59 + this.Statuses.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.OmnimessageId != null)
                    hashCode = hashCode * 59 + this.OmnimessageId.GetHashCode();
                return hashCode;
            }
        }
    }

}
